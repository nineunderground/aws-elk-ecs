AWSTemplateFormatVersion: "2010-09-09"
Description: ELK Stack using ECS cluster with fargate
Metadata:
  InfraCreationCLI:
    Description: "aws --profile MY-PROFILE cloudformation deploy --template-file ecs-deployment-fargate.yaml --stack-name ecs-elk --parameter-overrides $(cat parameters-fargate.cfg) --capabilities CAPABILITY_IAM"
  InfraDeletionCLI:
    Description: "aws --profile MY-PROFILE cloudformation delete-stack --stack-name ecs-elk"
  ServiceToggleCLI:
    Description: "aws --profile MY-PROFILE ecs update-service --cluster TODO --service TODO --desired-count TODO"
Parameters:
  FargateMemory:
    Type: String
    Description: Fargate memory size for task
  FargateCPU:
    Type: String
    Description: Fargate CPU size for task
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Target VPC
  EcsClusterName:
    Type: String
    Description: >
      Specifies the ECS Cluster Name with which the resources would be
      associated
  EcsServiceName:
    Type: String
    Description: >
      Specifies the ECS Cluster Name with which the resources would be
      associated
  ApplicationSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Target subnets for EC2 instances
  MyInternetIP:
    Type: String
    Description: The local internet address, CIDR formatted.
  ImgLogstash:
    Type: String
    Description: Logstash Docker Image
  ImgKibana:
    Type: String
    Description: Kibana Docker Image
  ImgElasticsearch:
    Type: String
    Description: Elasticsearch Docker Image

Resources:

#################
## EC2 STATIC
#################

  InstanceContainerPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for allow ECS container to execute the task definition
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
            - 'ecs:RegisterContainerInstance'
            - 'ecs:DeregisterContainerInstance'
            - 'ecs:UpdateContainerInstancesState'
            Resource: !Sub ${ApplicationCluster.Arn}
          - Effect: Allow
            Action:
            - 'ecs:DiscoverPollEndpoint'
            - 'ecs:Submit*'
            - 'ecs:Poll'
            - 'ecs:StartTelemetrySession'
            Resource: "*"
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource: "*"

  ApplicationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - {Ref: InstanceContainerPolicy}

  ApplicationAutoscalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName} Application Autoscaling Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup

#################
## ELB
#################

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref ApplicationSubnets
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value : 30
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Load Balancer Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyInternetIP
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !Ref MyInternetIP
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${AWS::StackName}-alb-sg

  KibanaLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - TargetGroupArn: !Ref KibanaTargetGroup
          Type: forward

  ElasticsearchLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 9200
      DefaultActions:
        - TargetGroupArn: !Ref ElasticsearchTargetGroup
          Type: forward

  KibanaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /app/kibana
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Protocol: HTTP
      Port: 5601
      VpcId: !Ref VpcId
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  ElasticsearchTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Protocol: HTTP
      Port: 9200
      VpcId: !Ref VpcId
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

#################
## ECS
#################

  ApplicationCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName

  ClusterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "", [ "/ecs/", !Ref EcsServiceName] ] 
      RetentionInDays: 3

  ApplicationTaskDefinitionELK:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: elk_fargate_family
      NetworkMode: awsvpc # All container should be able to talk each other using same network interface
      RequiresCompatibilities:
        - "FARGATE"
      Memory: !Ref FargateMemory
      Cpu: !Ref FargateCPU
      ExecutionRoleArn: !Ref ApplicationInstanceRole
      TaskRoleArn: !Ref ApplicationInstanceRole
      ContainerDefinitions:
        - Name: elasticsearch
          Image: !Ref ImgElasticsearch
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ClusterLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: elasticsearch
          MemoryReservation: 800
          PortMappings:
            - ContainerPort: 9200
              HostPort: 9200
              Protocol: TCP
            - ContainerPort: 9300
              HostPort: 9300
              Protocol: TCP
        #   HealthCheck:
        #     Command:
        #       - CMD-SHELL
        #         curl -f http://localhost:9200 || exit 1
        #     Interval: 30
        #     StartPeriod: 60
        #     Retries: 3
        #     Timeout: 5
          Environment:
            - Name: bootstrap.memory_lock
              Value: true
            - Name: cluster.name
              Value: cloudwatch-cluster
            - Name: discovery.zen.minimum_master_nodes
              Value: 1
            - Name: ES_JAVA_OPTS
              Value: "-Xms512m -Xmx512m"
            - Name: http.host
              Value: 0.0.0.0
            - Name: transport.host
              Value: 0.0.0.0
            - Name: node.store.allow_mmap
              Value: false
          Ulimits:
            - Name: memlock
              HardLimit: -1
              SoftLimit: -1
            - Name: nofile
              HardLimit: 65536
              SoftLimit: 65536
        - Name: kibana
          Image: !Ref ImgKibana
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ClusterLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kibana
          MemoryReservation: 300
          DependsOn:
            - Condition: START #HEALTHY
              ContainerName: elasticsearch
          PortMappings:
            - ContainerPort: 5601
              HostPort: 5601
              Protocol: TCP
          Environment:
            - Name: ELASTICSEARCH_HOSTS
              Value: http://127.0.0.1:9200
        - Name: logstash
          Image: !Ref ImgLogstash
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ClusterLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: logstash
          MemoryReservation: 500
          DependsOn:
            - Condition: START
              ContainerName: elasticsearch
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: TCP
          Environment:
            - Name: XPACK_MONITORING_ELASTICSEARCH_HOSTS
              Value: http://127.0.0.1:9200

  ApplicationServiceELB:
    DependsOn:
    - KibanaLoadBalancerHttpListener
    - ElasticsearchLoadBalancerHttpListener
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ApplicationCluster
      DesiredCount: 0
      HealthCheckGracePeriodSeconds: 300
      LoadBalancers:
        - ContainerName: kibana
          ContainerPort: 5601
          TargetGroupArn: !Ref KibanaTargetGroup
        - ContainerName: elasticsearch
          ContainerPort: 9200
          TargetGroupArn: !Ref ElasticsearchTargetGroup
      TaskDefinition: !Ref ApplicationTaskDefinitionELK
      ServiceName: !Ref EcsServiceName
      LaunchType: FARGATE
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # DISABLED If deployed in NAT subnets
          SecurityGroups:
            - !Ref ApplicationAutoscalingSecurityGroup
          Subnets: !Ref ApplicationSubnets

#################
## OUTPUT
#################

Outputs:
  TemplateVersion:
    Description: The version of the template used by Create Cluster Wizard
    Value: '2.0.0'

  PublicURL:
    Description: Public DNS name of Application Load Balancer
    Value: !Sub ${ApplicationLoadBalancer.DNSName}